{"version":3,"file":"component---src-templates-tags-tsx-a045e5d67019f172f7d5.js","mappings":"iPAGaA,EAAkBC,EAAAA,QAAAA,IAAAA,WAAH,2EAAGA,CAAH,+BAIfC,EAAcD,EAAAA,QAAAA,IAAAA,WAAH,uEAAGA,CAAH,0RAmBXE,EAAcF,EAAAA,QAAAA,IAAAA,WAAH,uEAAGA,CAAH,0BAIXG,EAAWH,EAAAA,QAAAA,IAAAA,WAAH,oEAAGA,CAAH,mlBAOVI,EAAAA,EAAAA,GAAS,mBAAoB,YAwB3BC,EAAcL,EAAAA,QAAAA,IAAAA,WAAH,uEAAGA,CAAH,+BAIXM,EAAYN,EAAAA,QAAAA,GAAAA,WAAH,qEAAGA,CAAH,8WAGXI,EAAAA,EAAAA,GAAS,mBAAoB,YAI3BA,EAAAA,EAAAA,GAAS,mBAAoB,YAe7BG,EAAUP,EAAAA,QAAAA,EAAAA,WAAH,mEAAGA,CAAH,mKACLI,EAAAA,EAAAA,GAAS,cAAe,OAC5BA,EAAAA,EAAAA,GAAS,YAAa,YASpBI,EAAWR,EAAAA,QAAAA,IAAAA,WAAH,oEAAGA,CAAH,gTAWRI,EAAAA,EAAAA,GAAS,UAAW,Y,kEClBjC,EAlEyD,SAAC,GASnD,IARLK,EAQI,EARJA,MACAC,EAOI,EAPJA,MACAC,EAMI,EANJA,YACAC,EAKI,EALJA,IACAC,EAII,EAJJA,KACAC,EAGI,EAHJA,KACAC,EAEI,EAFJA,UACGC,GACC,YAEEC,EAAgB,CAAC,aAOvB,OAJIF,GACFE,EAAcC,KAAKH,GAInB,gBAAChB,EAAD,eAAiBgB,UAAWE,EAAcE,KAAK,MAAUH,GAC7C,MAATP,EAAgB,KACf,gBAACR,EAAD,CAAac,UAAU,gBACrB,gBAAC,EAAAK,KAAD,CAAMC,GAAIT,GACR,gBAAC,IAAD,CAAaU,IAAKb,EAAOc,IAAI,mBAKnC,gBAACrB,EAAD,CAAaa,UAAU,gBACpBF,GACC,gBAACV,EAAD,CACEqB,wBAAyB,CACvBC,OAAQZ,GAEVE,UAAU,cAId,gBAACV,EAAD,CAAaU,UAAU,gBACrB,gBAACT,EAAD,CAAWS,UAAU,cACnB,gBAAC,EAAAK,KAAD,CAAMC,GAAIT,GAAMF,IAEjBC,GACC,gBAACJ,EAAD,CACEiB,wBAAyB,CACvBC,OAAQd,GAEVI,UAAU,YAIL,MAARD,EAAe,KACd,gBAACN,EAAD,CAAUO,UAAU,aACjBD,EAAKY,KAAI,SAACC,EAAaC,GAAd,OACR,gBAAC,EAAAR,KAAD,CAAMS,IAAKD,EAAOP,GAAE,SAAW,IAAYM,GAAvB,KAApB,IACOA,Y,gFC7CvB,UA5Ba,SAAC,GAAgC,IAA9BG,EAA6B,EAA7BA,YAAaC,EAAgB,EAAhBA,KACnBJ,EAAQG,EAARH,IACR,EAA8BI,EAAKC,kBAA3BC,EAAR,EAAQA,MAAOC,EAAf,EAAeA,WAEf,OACE,gBAAC,IAAD,KACE,gBAAC,IAAD,CAAKxB,MAAOiB,EAAKhB,YAAW,mBAAqBuB,EAArB,UAE5B,gBAAC,KAAD,KACE,gBAAC,KAAD,KACE,gBAAC,KAAD,KAAUP,GADZ,mBAEsBO,EAFtB,SAICD,EAAMP,KAAI,gBAAGS,EAAH,EAAGA,KAAH,EAASP,MAAT,OACT,gBAAC,IAAD,CACEC,IAAKM,EAAKC,OAAOC,KACjB3B,MAAOyB,EAAKG,YAAY5B,MACxBE,IAAKuB,EAAKC,OAAOC,KACjB1B,YAAawB,EAAKG,YAAY3B,aAAewB,EAAKI,QAClD1B,KAAMsB,EAAKG,YAAYzB,KACvBC,KAAMqB,EAAKG,YAAYxB","sources":["webpack://@blog/personal-lite/./src/components/post-card/post-card.style.tsx","webpack://@blog/personal-lite/./src/components/post-card/post-card.tsx","webpack://@blog/personal-lite/./src/templates/tags.tsx"],"sourcesContent":["import styled from 'styled-components';\nimport { themeGet } from '@styled-system/theme-get';\n\nexport const PostCardWrapper = styled.div`\n  position: relative;\n`;\n\nexport const PostPreview = styled.div`\n  margin-bottom: 45px;\n  position: relative;\n  img {\n    border-radius: 3px;\n  }\n\n  &:before {\n    content: '';\n    position: absolute;\n    width: 80%;\n    height: 80%;\n    background-color: #757575;\n    bottom: 0;\n    left: 10%;\n    filter: blur(15px);\n  }\n`;\n\nexport const PostDetails = styled.div`\n  display: flex;\n`;\n\nexport const PostDate = styled.div`\n  font-size: 90px;\n  font-weight: 700;\n  text-align: center;\n  padding: 30px 35px 15px 35px;\n  margin-right: 20px;\n  line-height: 1;\n  color: ${themeGet('colors.textColor', '#292929')};\n  @media (max-width: 1200px) {\n    font-size: 70px;\n    padding: 25px 25px 15px 25px;\n    margin-right: 35px;\n  }\n  @media (max-width: 990px) {\n    font-size: 56px;\n    padding: 20px 20px 15px 20px;\n    margin-right: 25px;\n  }\n  @media (max-width: 575px) {\n    display: none;\n  }\n\n  > span {\n    font-size: 13px;\n    font-weight: 400;\n    display: block;\n    margin-top: 12px;\n    text-transform: uppercase;\n  }\n`;\n\nexport const PostContent = styled.div`\n  align-self: center;\n`;\n\nexport const PostTitle = styled.h2`\n  font-size: 30px;\n  font-weight: 700;\n  color: ${themeGet('colors.textColor', '#292929')};\n  line-height: 1.53;\n  margin-bottom: 10px;\n  a {\n    color: ${themeGet('colors.textColor', '#292929')};\n  }\n  @media (max-width: 1200px) {\n    font-size: 26px;\n  }\n  @media (max-width: 990px) {\n    font-size: 21px;\n    margin-bottom: 12px;\n  }\n  @media (max-width: 575px) {\n    font-size: 20px;\n    margin-bottom: 10px;\n  }\n`;\n\nexport const Excerpt = styled.p`\n  font-size: ${themeGet('fontSizes.3', '15')}px;\n  color: ${themeGet('textColor', '#292929')};\n  font-weight: 400;\n  line-height: 2;\n  margin-bottom: 0;\n  @media (max-width: 990px) {\n    font-size: 14px;\n  }\n`;\n\nexport const PostTags = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  align-items: center;\n  margin-top: 15px;\n\n  a {\n    display: block;\n    margin-right: 30px;\n    font-size: 14px;\n    font-weight: 400;\n    color: ${themeGet('primary', '#D10068')};\n    @media (max-width: 990px) {\n      font-size: 13px;\n      margin-right: 25px;\n    }\n  }\n`;\n","import * as React from 'react';\nimport { Link } from 'gatsby';\nimport _ from 'lodash';\nimport GatsbyImage from '../../components/gatsby-image';\nimport {\n  PostCardWrapper,\n  PostPreview,\n  PostDetails,\n  PostDate,\n  PostTitle,\n  Excerpt,\n  PostContent,\n  PostTags,\n} from './post-card.style';\n\ninterface PostCardProps {\n  image?: any;\n  title: string;\n  description?: string;\n  url: string;\n  date?: string;\n  tags?: [];\n  className?: string;\n}\n\nconst PostCard: React.FunctionComponent<PostCardProps> = ({\n  image,\n  title,\n  description,\n  url,\n  date,\n  tags,\n  className,\n  ...props\n}) => {\n  // Add all classs to an array\n  const addAllClasses = ['post_card'];\n\n  // className prop checking\n  if (className) {\n    addAllClasses.push(className);\n  }\n\n  return (\n    <PostCardWrapper className={addAllClasses.join(' ')} {...props}>\n      {image == null ? null : (\n        <PostPreview className=\"post_preview\">\n          <Link to={url}>\n            <GatsbyImage src={image} alt=\"post preview\" />\n          </Link>\n        </PostPreview>\n      )}\n\n      <PostDetails className=\"post_details\">\n        {date && (\n          <PostDate\n            dangerouslySetInnerHTML={{\n              __html: date,\n            }}\n            className=\"post_date\"\n          />\n        )}\n\n        <PostContent className=\"post_content\">\n          <PostTitle className=\"post_title\">\n            <Link to={url}>{title}</Link>\n          </PostTitle>\n          {description && (\n            <Excerpt\n              dangerouslySetInnerHTML={{\n                __html: description,\n              }}\n              className=\"excerpt\"\n            />\n          )}\n\n          {tags == null ? null : (\n            <PostTags className=\"post_tags\">\n              {tags.map((tag: string, index: number) => (\n                <Link key={index} to={`/tags/${_.kebabCase(tag)}/`}>\n                  {`#${tag}`}\n                </Link>\n              ))}\n            </PostTags>\n          )}\n        </PostContent>\n      </PostDetails>\n    </PostCardWrapper>\n  );\n};\n\nexport default PostCard;\n","import React from 'react';\nimport { Link, graphql } from 'gatsby';\nimport Layout from '../components/layout';\nimport PostCard from '../components/post-card/post-card';\nimport SEO from '../components/seo';\nimport { TagPostsWrapper, TagPageHeading, TagName } from './templates.style';\n\nconst Tags = ({ pageContext, data }: any) => {\n  const { tag } = pageContext;\n  const { edges, totalCount } = data.allMarkdownRemark;\n\n  return (\n    <Layout>\n      <SEO title={tag} description={`A collection of ${totalCount} post`} />\n\n      <TagPostsWrapper>\n        <TagPageHeading>\n          <TagName>{tag}</TagName>\n          {`A collection of ${totalCount} post`}\n        </TagPageHeading>\n        {edges.map(({ node, index }: any) => (\n          <PostCard\n            key={node.fields.slug}\n            title={node.frontmatter.title}\n            url={node.fields.slug}\n            description={node.frontmatter.description || node.excerpt}\n            date={node.frontmatter.date}\n            tags={node.frontmatter.tags}\n          />\n        ))}\n      </TagPostsWrapper>\n    </Layout>\n  );\n};\n\nexport default Tags;\n\nexport const pageQuery = graphql`\n  query($tag: String) {\n    allMarkdownRemark(\n      limit: 2000\n      sort: { fields: [frontmatter___date], order: DESC }\n      filter: { frontmatter: { tags: { in: [$tag] } } }\n    ) {\n      totalCount\n      edges {\n        node {\n          excerpt(pruneLength: 300)\n          fields {\n            slug\n          }\n          frontmatter {\n            date(formatString: \"DD [<span>] MMMM [</span>]\")\n            title\n            tags\n            description\n          }\n        }\n      }\n    }\n  }\n`;\n"],"names":["PostCardWrapper","styled","PostPreview","PostDetails","PostDate","themeGet","PostContent","PostTitle","Excerpt","PostTags","image","title","description","url","date","tags","className","props","addAllClasses","push","join","Link","to","src","alt","dangerouslySetInnerHTML","__html","map","tag","index","key","pageContext","data","allMarkdownRemark","edges","totalCount","node","fields","slug","frontmatter","excerpt"],"sourceRoot":""}